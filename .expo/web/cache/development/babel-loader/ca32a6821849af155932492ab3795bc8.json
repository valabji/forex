{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\valab\\\\Desktop\\\\khamsat\\\\forex\\\\App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { SplashScreen } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport BottomTabNavigator from \"./navigation/BottomTabNavigator\";\nimport LoginScreen from \"./screens/LoginScreen\";\nimport RegScreen from \"./screens/Register\";\nimport TabBarIcon from \"./components/TabBarIcon\";\nimport Screen3 from \"./screens/Screen3\";\nimport useLinking from \"./navigation/useLinking\";\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport Clrs from \"./constants/Colors\";\nimport { useFonts, Cairo_400Regular } from '@expo-google-fonts/cairo';\nvar Stack = createStackNavigator();\nexport default function App(props) {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoadingComplete = _React$useState2[0],\n      setLoadingComplete = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      initialNavigationState = _React$useState4[0],\n      setInitialNavigationState = _React$useState4[1];\n\n  var containerRef = React.useRef();\n\n  var _useLinking = useLinking(containerRef),\n      getInitialState = _useLinking.getInitialState;\n\n  var _useFonts = useFonts({\n    Cairo_400Regular: Cairo_400Regular\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  React.useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _regeneratorRuntime.async(function loadResourcesAndDataAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              SplashScreen.preventAutoHide();\n              _context.t0 = setInitialNavigationState;\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(getInitialState());\n\n            case 5:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread({}, Ionicons.font, {\n                'space-mono': require(\"./assets/fonts/SpaceMono-Regular.ttf\")\n              })));\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t2 = _context[\"catch\"](0);\n              console.warn(_context.t2);\n\n            case 14:\n              _context.prev = 14;\n              setLoadingComplete(true);\n              SplashScreen.hide();\n              return _context.finish(14);\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 11, 14, 18]], Promise);\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return React.createElement(View, {\n      style: styles.container,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, Platform.OS === 'ios' && React.createElement(StatusBar, {\n      barStyle: \"default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 35\n      }\n    }), React.createElement(NavigationContainer, {\n      ref: containerRef,\n      initialState: initialNavigationState,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, React.createElement(Stack.Navigator, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, React.createElement(Stack.Screen, {\n      name: \"BotNav\",\n      component: DNav,\n      options: {\n        title: \"Main Screen\",\n        headerShown: false,\n        headerStyle: {\n          backgroundColor: \"#ddd\"\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }), React.createElement(Stack.Screen, {\n      name: \"Root\",\n      component: BNav,\n      options: {\n        title: \"ReKit / Login\",\n        headerShown: false,\n        headerStyle: {\n          backgroundColor: \"#ddd\"\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }))));\n  }\n}\nvar Drawer = createDrawerNavigator();\n\nfunction DNav() {\n  return React.createElement(Drawer.Navigator, {\n    initialRouteName: \"Home\",\n    drawerType: \"slide\",\n    drawerContent: function drawerContent() {\n      return React.createElement(View, {\n        style: {\n          width: \"100%\",\n          height: \"100%\",\n          backgroundColor: Clrs.BGreen\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 28\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, React.createElement(Drawer.Screen, {\n    name: \"Home\",\n    component: BottomTabNavigator,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }), React.createElement(Drawer.Screen, {\n    name: \"Screen3\",\n    component: Screen3,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar BottomNav = createBottomTabNavigator();\n\nfunction BNav() {\n  return React.createElement(BottomNav.Navigator, {\n    initialRouteName: \"Login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, React.createElement(BottomNav.Screen, {\n    name: \"Login\",\n    component: LoginScreen,\n    options: {\n      title: 'Login',\n      tabBarIcon: function tabBarIcon(_ref) {\n        var focused = _ref.focused;\n        return React.createElement(TabBarIcon, {\n          focused: focused,\n          name: \"md-log-in\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 40\n          }\n        });\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }), React.createElement(BottomNav.Screen, {\n    name: \"Register\",\n    component: RegScreen,\n    options: {\n      title: 'Register',\n      tabBarIcon: function tabBarIcon(_ref2) {\n        var focused = _ref2.focused;\n        return React.createElement(TabBarIcon, {\n          focused: focused,\n          name: \"md-person-add\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 40\n          }\n        });\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#F0F'\n  }\n});","map":{"version":3,"sources":["C:/Users/valab/Desktop/khamsat/forex/App.js"],"names":["React","SplashScreen","Font","Ionicons","NavigationContainer","createStackNavigator","createDrawerNavigator","BottomTabNavigator","LoginScreen","RegScreen","TabBarIcon","Screen3","useLinking","createBottomTabNavigator","Clrs","useFonts","Cairo_400Regular","Stack","App","props","useState","isLoadingComplete","setLoadingComplete","initialNavigationState","setInitialNavigationState","containerRef","useRef","getInitialState","fontsLoaded","useEffect","loadResourcesAndDataAsync","preventAutoHide","loadAsync","font","require","console","warn","hide","skipLoadingScreen","styles","container","Platform","OS","DNav","title","headerShown","headerStyle","backgroundColor","BNav","Drawer","width","height","BGreen","BottomNav","tabBarIcon","focused","StyleSheet","create","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Platform, StatusBar, StyleSheet, View, Text } from 'react-native';\r\nimport { SplashScreen } from 'expo';\r\nimport * as Font from 'expo-font';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport { createDrawerNavigator } from '@react-navigation/drawer'\r\nimport BottomTabNavigator from './navigation/BottomTabNavigator';\r\nimport LoginScreen from './screens/LoginScreen'\r\nimport RegScreen from './screens/Register'\r\nimport TabBarIcon from './components/TabBarIcon';\r\nimport Screen3 from './screens/Screen3'\r\nimport useLinking from './navigation/useLinking';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport Clrs from \"./constants/Colors\";\r\nimport { useFonts, Cairo_400Regular } from '@expo-google-fonts/cairo';\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nexport default function App(props) {\r\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\r\n  const [initialNavigationState, setInitialNavigationState] = React.useState();\r\n  const containerRef = React.useRef();\r\n  const { getInitialState } = useLinking(containerRef);\r\n  let [fontsLoaded] = useFonts({\r\n    Cairo_400Regular,\r\n  });\r\n  React.useEffect(() => {\r\n    async function loadResourcesAndDataAsync() {\r\n      try {\r\n        SplashScreen.preventAutoHide();\r\n        setInitialNavigationState(await getInitialState());\r\n        await Font.loadAsync({\r\n          ...Ionicons.font,\r\n          'space-mono': require('./assets/fonts/SpaceMono-Regular.ttf'),\r\n        });\r\n      } catch (e) {\r\n        console.warn(e);\r\n      } finally {\r\n        setLoadingComplete(true);\r\n        SplashScreen.hide();\r\n      }\r\n    }\r\n\r\n    loadResourcesAndDataAsync();\r\n  }, []);\r\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\r\n    return null;\r\n  } else {\r\n    return (\r\n      <View style={styles.container}>\r\n        {Platform.OS === 'ios' && <StatusBar barStyle=\"default\" />}\r\n        <NavigationContainer ref={containerRef} initialState={initialNavigationState}>\r\n          <Stack.Navigator>\r\n            <Stack.Screen name=\"BotNav\" component={DNav} options={{ title: \"Main Screen\", headerShown: false, headerStyle: { backgroundColor: \"#ddd\" } }} />\r\n            <Stack.Screen name=\"Root\" component={BNav} options={{ title: \"ReKit / Login\", headerShown: false, headerStyle: { backgroundColor: \"#ddd\" } }} />\r\n          </Stack.Navigator>\r\n        </NavigationContainer>\r\n      </View>\r\n    );\r\n  }\r\n}\r\nconst Drawer = createDrawerNavigator();\r\nfunction DNav() {\r\n  return (\r\n    <Drawer.Navigator initialRouteName=\"Home\"\r\n      drawerType=\"slide\"\r\n      drawerContent={() => <View\r\n        style={{ width: \"100%\", height: \"100%\", backgroundColor: Clrs.BGreen }}>\r\n\r\n      </View>}\r\n    >\r\n      <Drawer.Screen name=\"Home\" component={BottomTabNavigator} />\r\n      <Drawer.Screen name=\"Screen3\" component={Screen3} />\r\n    </Drawer.Navigator>\r\n  );\r\n}\r\n\r\nconst BottomNav = createBottomTabNavigator();\r\nfunction BNav() {\r\n  return (\r\n    <BottomNav.Navigator initialRouteName=\"Login\">\r\n      <BottomNav.Screen\r\n        name=\"Login\"\r\n        component={LoginScreen}\r\n        options={{\r\n          title: 'Login',\r\n          tabBarIcon: ({ focused }) => <TabBarIcon focused={focused} name=\"md-log-in\" />,\r\n        }}\r\n      />\r\n      <BottomNav.Screen\r\n        name=\"Register\"\r\n        component={RegScreen}\r\n        options={{\r\n          title: 'Register',\r\n          tabBarIcon: ({ focused }) => <TabBarIcon focused={focused} name=\"md-person-add\" />,\r\n        }}\r\n      />\r\n    </BottomNav.Navigator>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#F0F',\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}