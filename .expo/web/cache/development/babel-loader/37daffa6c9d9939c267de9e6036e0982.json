{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nimport { makeRemote, makeShareable, isConfigured } from \"./core\";\nimport { interpolate } from \"./interpolation\";\nimport { Extrapolate } from \"../reanimated1/derived\";\nvar NUMBER = '[-+]?\\\\d*\\\\.?\\\\d+';\nvar PERCENTAGE = NUMBER + '%';\n\nfunction call() {\n  'worklet';\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return '\\\\(\\\\s*(' + args.join(')\\\\s*,\\\\s*(') + ')\\\\s*\\\\)';\n}\n\nvar jsCachedMatchers = {};\nvar uiCachedMatchers = !isConfigured() ? null : makeRemote({});\n\nfunction getMatchers() {\n  'worklet';\n\n  var cachedMatchers = _WORKLET ? uiCachedMatchers : jsCachedMatchers;\n\n  if (cachedMatchers.rgb === undefined) {\n    cachedMatchers.rgb = new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER));\n    cachedMatchers.rgba = new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER));\n    cachedMatchers.hsl = new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE));\n    cachedMatchers.hsla = new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));\n    cachedMatchers.hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n    cachedMatchers.hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n    cachedMatchers.hex6 = /^#([0-9a-fA-F]{6})$/;\n    cachedMatchers.hex8 = /^#([0-9a-fA-F]{8})$/;\n  }\n\n  return cachedMatchers;\n}\n\ngetMatchers();\n\nfunction hue2rgb(p, q, t) {\n  'worklet';\n\n  if (t < 0) {\n    t += 1;\n  }\n\n  if (t > 1) {\n    t -= 1;\n  }\n\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n\n  if (t < 1 / 2) {\n    return q;\n  }\n\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n\n  return p;\n}\n\nfunction hslToRgb(h, s, l) {\n  'worklet';\n\n  var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  var p = 2 * l - q;\n  var r = hue2rgb(p, q, h + 1 / 3);\n  var g = hue2rgb(p, q, h);\n  var b = hue2rgb(p, q, h - 1 / 3);\n  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;\n}\n\nfunction parse255(str) {\n  'worklet';\n\n  var int = Number.parseInt(str, 10);\n\n  if (int < 0) {\n    return 0;\n  }\n\n  if (int > 255) {\n    return 255;\n  }\n\n  return int;\n}\n\nfunction parse360(str) {\n  'worklet';\n\n  var int = Number.parseFloat(str);\n  return (int % 360 + 360) % 360 / 360;\n}\n\nfunction parse1(str) {\n  'worklet';\n\n  var num = Number.parseFloat(str);\n\n  if (num < 0) {\n    return 0;\n  }\n\n  if (num > 1) {\n    return 255;\n  }\n\n  return Math.round(num * 255);\n}\n\nfunction parsePercentage(str) {\n  'worklet';\n\n  var int = Number.parseFloat(str);\n\n  if (int < 0) {\n    return 0;\n  }\n\n  if (int > 100) {\n    return 1;\n  }\n\n  return int / 100;\n}\n\nvar names = !isConfigured() ? null : makeShareable({\n  transparent: 0x00000000,\n  aliceblue: 0xf0f8ffff,\n  antiquewhite: 0xfaebd7ff,\n  aqua: 0x00ffffff,\n  aquamarine: 0x7fffd4ff,\n  azure: 0xf0ffffff,\n  beige: 0xf5f5dcff,\n  bisque: 0xffe4c4ff,\n  black: 0x000000ff,\n  blanchedalmond: 0xffebcdff,\n  blue: 0x0000ffff,\n  blueviolet: 0x8a2be2ff,\n  brown: 0xa52a2aff,\n  burlywood: 0xdeb887ff,\n  burntsienna: 0xea7e5dff,\n  cadetblue: 0x5f9ea0ff,\n  chartreuse: 0x7fff00ff,\n  chocolate: 0xd2691eff,\n  coral: 0xff7f50ff,\n  cornflowerblue: 0x6495edff,\n  cornsilk: 0xfff8dcff,\n  crimson: 0xdc143cff,\n  cyan: 0x00ffffff,\n  darkblue: 0x00008bff,\n  darkcyan: 0x008b8bff,\n  darkgoldenrod: 0xb8860bff,\n  darkgray: 0xa9a9a9ff,\n  darkgreen: 0x006400ff,\n  darkgrey: 0xa9a9a9ff,\n  darkkhaki: 0xbdb76bff,\n  darkmagenta: 0x8b008bff,\n  darkolivegreen: 0x556b2fff,\n  darkorange: 0xff8c00ff,\n  darkorchid: 0x9932ccff,\n  darkred: 0x8b0000ff,\n  darksalmon: 0xe9967aff,\n  darkseagreen: 0x8fbc8fff,\n  darkslateblue: 0x483d8bff,\n  darkslategray: 0x2f4f4fff,\n  darkslategrey: 0x2f4f4fff,\n  darkturquoise: 0x00ced1ff,\n  darkviolet: 0x9400d3ff,\n  deeppink: 0xff1493ff,\n  deepskyblue: 0x00bfffff,\n  dimgray: 0x696969ff,\n  dimgrey: 0x696969ff,\n  dodgerblue: 0x1e90ffff,\n  firebrick: 0xb22222ff,\n  floralwhite: 0xfffaf0ff,\n  forestgreen: 0x228b22ff,\n  fuchsia: 0xff00ffff,\n  gainsboro: 0xdcdcdcff,\n  ghostwhite: 0xf8f8ffff,\n  gold: 0xffd700ff,\n  goldenrod: 0xdaa520ff,\n  gray: 0x808080ff,\n  green: 0x008000ff,\n  greenyellow: 0xadff2fff,\n  grey: 0x808080ff,\n  honeydew: 0xf0fff0ff,\n  hotpink: 0xff69b4ff,\n  indianred: 0xcd5c5cff,\n  indigo: 0x4b0082ff,\n  ivory: 0xfffff0ff,\n  khaki: 0xf0e68cff,\n  lavender: 0xe6e6faff,\n  lavenderblush: 0xfff0f5ff,\n  lawngreen: 0x7cfc00ff,\n  lemonchiffon: 0xfffacdff,\n  lightblue: 0xadd8e6ff,\n  lightcoral: 0xf08080ff,\n  lightcyan: 0xe0ffffff,\n  lightgoldenrodyellow: 0xfafad2ff,\n  lightgray: 0xd3d3d3ff,\n  lightgreen: 0x90ee90ff,\n  lightgrey: 0xd3d3d3ff,\n  lightpink: 0xffb6c1ff,\n  lightsalmon: 0xffa07aff,\n  lightseagreen: 0x20b2aaff,\n  lightskyblue: 0x87cefaff,\n  lightslategray: 0x778899ff,\n  lightslategrey: 0x778899ff,\n  lightsteelblue: 0xb0c4deff,\n  lightyellow: 0xffffe0ff,\n  lime: 0x00ff00ff,\n  limegreen: 0x32cd32ff,\n  linen: 0xfaf0e6ff,\n  magenta: 0xff00ffff,\n  maroon: 0x800000ff,\n  mediumaquamarine: 0x66cdaaff,\n  mediumblue: 0x0000cdff,\n  mediumorchid: 0xba55d3ff,\n  mediumpurple: 0x9370dbff,\n  mediumseagreen: 0x3cb371ff,\n  mediumslateblue: 0x7b68eeff,\n  mediumspringgreen: 0x00fa9aff,\n  mediumturquoise: 0x48d1ccff,\n  mediumvioletred: 0xc71585ff,\n  midnightblue: 0x191970ff,\n  mintcream: 0xf5fffaff,\n  mistyrose: 0xffe4e1ff,\n  moccasin: 0xffe4b5ff,\n  navajowhite: 0xffdeadff,\n  navy: 0x000080ff,\n  oldlace: 0xfdf5e6ff,\n  olive: 0x808000ff,\n  olivedrab: 0x6b8e23ff,\n  orange: 0xffa500ff,\n  orangered: 0xff4500ff,\n  orchid: 0xda70d6ff,\n  palegoldenrod: 0xeee8aaff,\n  palegreen: 0x98fb98ff,\n  paleturquoise: 0xafeeeeff,\n  palevioletred: 0xdb7093ff,\n  papayawhip: 0xffefd5ff,\n  peachpuff: 0xffdab9ff,\n  peru: 0xcd853fff,\n  pink: 0xffc0cbff,\n  plum: 0xdda0ddff,\n  powderblue: 0xb0e0e6ff,\n  purple: 0x800080ff,\n  rebeccapurple: 0x663399ff,\n  red: 0xff0000ff,\n  rosybrown: 0xbc8f8fff,\n  royalblue: 0x4169e1ff,\n  saddlebrown: 0x8b4513ff,\n  salmon: 0xfa8072ff,\n  sandybrown: 0xf4a460ff,\n  seagreen: 0x2e8b57ff,\n  seashell: 0xfff5eeff,\n  sienna: 0xa0522dff,\n  silver: 0xc0c0c0ff,\n  skyblue: 0x87ceebff,\n  slateblue: 0x6a5acdff,\n  slategray: 0x708090ff,\n  slategrey: 0x708090ff,\n  snow: 0xfffafaff,\n  springgreen: 0x00ff7fff,\n  steelblue: 0x4682b4ff,\n  tan: 0xd2b48cff,\n  teal: 0x008080ff,\n  thistle: 0xd8bfd8ff,\n  tomato: 0xff6347ff,\n  turquoise: 0x40e0d0ff,\n  violet: 0xee82eeff,\n  wheat: 0xf5deb3ff,\n  white: 0xffffffff,\n  whitesmoke: 0xf5f5f5ff,\n  yellow: 0xffff00ff,\n  yellowgreen: 0x9acd32ff\n});\n\nfunction normalizeColor(color) {\n  'worklet';\n\n  if (typeof color === 'number') {\n    if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {\n      return color;\n    }\n\n    return null;\n  }\n\n  if (typeof color !== 'string') {\n    return null;\n  }\n\n  var matchers = getMatchers();\n  var match;\n\n  if (match = matchers.hex6.exec(color)) {\n    return Number.parseInt(match[1] + 'ff', 16) >>> 0;\n  }\n\n  if (names[color] !== undefined) {\n    return names[color];\n  }\n\n  if (match = matchers.rgb.exec(color)) {\n    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;\n  }\n\n  if (match = matchers.rgba.exec(color)) {\n    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;\n  }\n\n  if (match = matchers.hex3.exec(color)) {\n    return Number.parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;\n  }\n\n  if (match = matchers.hex8.exec(color)) {\n    return Number.parseInt(match[1], 16) >>> 0;\n  }\n\n  if (match = matchers.hex4.exec(color)) {\n    return Number.parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;\n  }\n\n  if (match = matchers.hsl.exec(color)) {\n    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;\n  }\n\n  if (match = matchers.hsla.exec(color)) {\n    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;\n  }\n\n  return null;\n}\n\nexport var opacity = function opacity(c) {\n  'worklet';\n\n  return (c >> 24 & 255) / 255;\n};\nexport var red = function red(c) {\n  'worklet';\n\n  return c >> 16 & 255;\n};\nexport var green = function green(c) {\n  'worklet';\n\n  return c >> 8 & 255;\n};\nexport var blue = function blue(c) {\n  'worklet';\n\n  return c & 255;\n};\nexport var rgbaColor = function rgbaColor(r, g, b) {\n  'worklet';\n\n  var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n  if (Platform.OS === 'web' || !_WORKLET) {\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + alpha + \")\";\n  }\n\n  var a = Math.round(alpha * 255);\n  var c = a * (1 << 24) + Math.round(r) * (1 << 16) + Math.round(g) * (1 << 8) + Math.round(b);\n\n  if (Platform.OS === 'android') {\n    return c < 1 << 31 >>> 0 ? c : c - Math.pow(2, 32);\n  }\n\n  return c;\n};\n\nfunction RGBtoHSV(r, g, b) {\n  'worklet';\n\n  if (arguments.length === 1) {\n    g = r.g;\n    b = r.b;\n    r = r.r;\n  }\n\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var d = max - min;\n  var s = max === 0 ? 0 : d / max;\n  var v = max / 255;\n  var h;\n\n  switch (max) {\n    default:\n    case min:\n      h = 0;\n      break;\n\n    case r:\n      h = g - b + d * (g < b ? 6 : 0);\n      h /= 6 * d;\n      break;\n\n    case g:\n      h = b - r + d * 2;\n      h /= 6 * d;\n      break;\n\n    case b:\n      h = r - g + d * 4;\n      h /= 6 * d;\n      break;\n  }\n\n  return {\n    h: h,\n    s: s,\n    v: v\n  };\n}\n\nfunction HSVtoRGB(h, s, v) {\n  'worklet';\n\n  var r, g, b, i, f, p, q, t;\n\n  if (arguments.length === 1) {\n    s = h.s;\n    v = h.v;\n    h = h.h;\n  }\n\n  i = Math.floor(h * 6);\n  f = h * 6 - i;\n  p = v * (1 - s);\n  q = v * (1 - f * s);\n  t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v, g = t, b = p;\n      break;\n\n    case 1:\n      r = q, g = v, b = p;\n      break;\n\n    case 2:\n      r = p, g = v, b = t;\n      break;\n\n    case 3:\n      r = p, g = q, b = v;\n      break;\n\n    case 4:\n      r = t, g = p, b = v;\n      break;\n\n    case 5:\n      r = v, g = p, b = q;\n      break;\n  }\n\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n}\n\nexport var hsvToColor = function hsvToColor(h, s, v) {\n  'worklet';\n\n  var _HSVtoRGB = HSVtoRGB(h, s, v),\n      r = _HSVtoRGB.r,\n      g = _HSVtoRGB.g,\n      b = _HSVtoRGB.b;\n\n  return rgbaColor(r, g, b);\n};\nexport function processColorInitially(color) {\n  'worklet';\n\n  if (color === null || color === undefined || typeof color === 'number') {\n    return color;\n  }\n\n  var normalizedColor = normalizeColor(color);\n\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  normalizedColor = (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;\n  return normalizedColor;\n}\nexport function isColor(value) {\n  'worklet';\n\n  if (typeof value !== 'string') {\n    return false;\n  }\n\n  return processColorInitially(value) != null;\n}\nexport function processColor(color) {\n  'worklet';\n\n  var normalizedColor = processColorInitially(color);\n\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  if (Platform.OS === 'android') {\n    normalizedColor = normalizedColor | 0x0;\n  }\n\n  return normalizedColor;\n}\nexport function convertToHSVA(color) {\n  'worklet';\n\n  var processedColor = processColorInitially(color);\n  var a = (processedColor >>> 24) / 255;\n  var r = processedColor << 8 >>> 24;\n  var g = processedColor << 16 >>> 24;\n  var b = processedColor << 24 >>> 24;\n\n  var _RGBtoHSV = RGBtoHSV(r, g, b),\n      h = _RGBtoHSV.h,\n      s = _RGBtoHSV.s,\n      v = _RGBtoHSV.v;\n\n  return [h, s, v, a];\n}\nexport function toRGBA(HSVA) {\n  'worklet';\n\n  var _HSVtoRGB2 = HSVtoRGB(HSVA[0], HSVA[1], HSVA[2]),\n      r = _HSVtoRGB2.r,\n      g = _HSVtoRGB2.g,\n      b = _HSVtoRGB2.b;\n\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + HSVA[3] + \")\";\n}\n\nvar interpolateColorsHSV = function interpolateColorsHSV(value, inputRange, colors) {\n  'worklet';\n\n  var colorsAsHSV = colors.map(function (c) {\n    return RGBtoHSV(c);\n  });\n  var h = interpolate(value, inputRange, colorsAsHSV.map(function (c) {\n    return c.h;\n  }), Extrapolate.CLAMP);\n  var s = interpolate(value, inputRange, colorsAsHSV.map(function (c) {\n    return c.s;\n  }), Extrapolate.CLAMP);\n  var v = interpolate(value, inputRange, colorsAsHSV.map(function (c) {\n    return c.v;\n  }), Extrapolate.CLAMP);\n  return hsvToColor(h, s, v);\n};\n\nvar interpolateColorsRGB = function interpolateColorsRGB(value, inputRange, colors) {\n  'worklet';\n\n  var r = Math.round(interpolate(value, inputRange, colors.map(function (c) {\n    return red(c);\n  }), Extrapolate.CLAMP));\n  var g = Math.round(interpolate(value, inputRange, colors.map(function (c) {\n    return green(c);\n  }), Extrapolate.CLAMP));\n  var b = Math.round(interpolate(value, inputRange, colors.map(function (c) {\n    return blue(c);\n  }), Extrapolate.CLAMP));\n  var a = interpolate(value, inputRange, colors.map(function (c) {\n    return opacity(c);\n  }), Extrapolate.CLAMP);\n  return rgbaColor(r, g, b, a);\n};\n\nexport var interpolateColor = function interpolateColor(value, inputRange, outputRange) {\n  'worklet';\n\n  var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'RGB';\n  var processedOutputRange = outputRange.map(function (c) {\n    return processColor(c);\n  });\n\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(value, inputRange, processedOutputRange);\n  }\n\n  if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(value, inputRange, processedOutputRange);\n  }\n\n  throw new Error(\"invalid color space provided: \" + colorSpace + \". Supported values are: ['RGB', 'HSV']\");\n};","map":{"version":3,"sources":["C:/Users/valab/Desktop/khamsat/forex/node_modules/react-native-reanimated/src/reanimated2/Colors.ts"],"names":["makeRemote","makeShareable","isConfigured","interpolate","Extrapolate","NUMBER","PERCENTAGE","call","args","join","jsCachedMatchers","uiCachedMatchers","getMatchers","cachedMatchers","_WORKLET","rgb","undefined","RegExp","rgba","hsl","hsla","hex3","hex4","hex6","hex8","hue2rgb","p","q","t","hslToRgb","h","s","l","r","g","b","Math","round","parse255","str","int","Number","parseInt","parse360","parseFloat","parse1","num","parsePercentage","names","transparent","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","burntsienna","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","normalizeColor","color","matchers","match","exec","opacity","c","rgbaColor","alpha","Platform","OS","a","pow","RGBtoHSV","arguments","length","max","min","d","v","HSVtoRGB","i","f","floor","hsvToColor","processColorInitially","normalizedColor","isColor","value","processColor","convertToHSVA","processedColor","toRGBA","HSVA","interpolateColorsHSV","inputRange","colors","colorsAsHSV","map","CLAMP","interpolateColorsRGB","interpolateColor","outputRange","colorSpace","processedOutputRange","Error"],"mappings":"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","sourcesContent":["/* global _WORKLET */\n/**\n * Copied from:\n * react-native/Libraries/StyleSheet/normalizeColor.js\n * react-native/Libraries/StyleSheet/processColor.js\n * https://github.com/wcandillon/react-native-redash/blob/master/src/Colors.ts\n */\n\n/* eslint no-bitwise: 0 */\nimport { Platform } from 'react-native';\nimport { makeRemote, makeShareable, isConfigured } from './core';\nimport { interpolate } from './interpolation';\n// @ts-ignore JS file\nimport { Extrapolate } from '../reanimated1/derived';\n\ninterface RBG {\n  r: number;\n  g: number;\n  b: number;\n}\n\ninterface HSV {\n  h: number;\n  s: number;\n  v: number;\n}\n\n// var INTEGER = '[-+]?\\\\d+';\nconst NUMBER = '[-+]?\\\\d*\\\\.?\\\\d+';\nconst PERCENTAGE = NUMBER + '%';\n\nfunction call(...args: unknown[]): string {\n  'worklet';\n  return '\\\\(\\\\s*(' + args.join(')\\\\s*,\\\\s*(') + ')\\\\s*\\\\)';\n}\n\n// matchers use RegExp objects which needs to be created separately on JS and on\n// the UI thread. We keep separate cache of Regexes for UI and JS using the below\n// objects, then pick the right cache in getMatchers() method.\nconst jsCachedMatchers = {};\nconst uiCachedMatchers = !isConfigured() ? null : makeRemote({});\ntype Matchers = {\n  rgb: RegExp;\n  rgba: RegExp;\n  hsl: RegExp;\n  hsla: RegExp;\n  hex3: RegExp;\n  hex4: RegExp;\n  hex5: RegExp;\n  hex6: RegExp;\n  hex8: RegExp;\n};\nfunction getMatchers(): Matchers {\n  'worklet';\n  const cachedMatchers: Matchers = _WORKLET\n    ? uiCachedMatchers\n    : jsCachedMatchers;\n  if (cachedMatchers.rgb === undefined) {\n    cachedMatchers.rgb = new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER));\n    cachedMatchers.rgba = new RegExp(\n      'rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)\n    );\n    cachedMatchers.hsl = new RegExp(\n      'hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)\n    );\n    cachedMatchers.hsla = new RegExp(\n      'hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)\n    );\n    cachedMatchers.hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n    cachedMatchers.hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\n    cachedMatchers.hex6 = /^#([0-9a-fA-F]{6})$/;\n    cachedMatchers.hex8 = /^#([0-9a-fA-F]{8})$/;\n  }\n  return cachedMatchers;\n}\n// cachedMatchers is lazy loaded and it is frozen when worklet is being created,\n// it is possible to call getMatchers() when the object is frozen, then cachedMatchers\n// has no assigned regexes\ngetMatchers();\n\nfunction hue2rgb(p: number, q: number, t: number): number {\n  'worklet';\n  if (t < 0) {\n    t += 1;\n  }\n  if (t > 1) {\n    t -= 1;\n  }\n  if (t < 1 / 6) {\n    return p + (q - p) * 6 * t;\n  }\n  if (t < 1 / 2) {\n    return q;\n  }\n  if (t < 2 / 3) {\n    return p + (q - p) * (2 / 3 - t) * 6;\n  }\n  return p;\n}\n\nfunction hslToRgb(h: number, s: number, l: number): number {\n  'worklet';\n  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n  const p = 2 * l - q;\n  const r = hue2rgb(p, q, h + 1 / 3);\n  const g = hue2rgb(p, q, h);\n  const b = hue2rgb(p, q, h - 1 / 3);\n\n  return (\n    (Math.round(r * 255) << 24) |\n    (Math.round(g * 255) << 16) |\n    (Math.round(b * 255) << 8)\n  );\n}\n\nfunction parse255(str: string): number {\n  'worklet';\n  const int = Number.parseInt(str, 10);\n  if (int < 0) {\n    return 0;\n  }\n  if (int > 255) {\n    return 255;\n  }\n  return int;\n}\n\nfunction parse360(str: string): number {\n  'worklet';\n  const int = Number.parseFloat(str);\n  return (((int % 360) + 360) % 360) / 360;\n}\n\nfunction parse1(str: string): number {\n  'worklet';\n  const num = Number.parseFloat(str);\n  if (num < 0) {\n    return 0;\n  }\n  if (num > 1) {\n    return 255;\n  }\n  return Math.round(num * 255);\n}\n\nfunction parsePercentage(str: string): number {\n  'worklet';\n  // parseFloat conveniently ignores the final %\n  const int = Number.parseFloat(str);\n  if (int < 0) {\n    return 0;\n  }\n  if (int > 100) {\n    return 1;\n  }\n  return int / 100;\n}\n\nconst names: any = !isConfigured()\n  ? null\n  : makeShareable({\n      transparent: 0x00000000,\n\n      // http://www.w3.org/TR/css3-color/#svg-color\n      aliceblue: 0xf0f8ffff,\n      antiquewhite: 0xfaebd7ff,\n      aqua: 0x00ffffff,\n      aquamarine: 0x7fffd4ff,\n      azure: 0xf0ffffff,\n      beige: 0xf5f5dcff,\n      bisque: 0xffe4c4ff,\n      black: 0x000000ff,\n      blanchedalmond: 0xffebcdff,\n      blue: 0x0000ffff,\n      blueviolet: 0x8a2be2ff,\n      brown: 0xa52a2aff,\n      burlywood: 0xdeb887ff,\n      burntsienna: 0xea7e5dff,\n      cadetblue: 0x5f9ea0ff,\n      chartreuse: 0x7fff00ff,\n      chocolate: 0xd2691eff,\n      coral: 0xff7f50ff,\n      cornflowerblue: 0x6495edff,\n      cornsilk: 0xfff8dcff,\n      crimson: 0xdc143cff,\n      cyan: 0x00ffffff,\n      darkblue: 0x00008bff,\n      darkcyan: 0x008b8bff,\n      darkgoldenrod: 0xb8860bff,\n      darkgray: 0xa9a9a9ff,\n      darkgreen: 0x006400ff,\n      darkgrey: 0xa9a9a9ff,\n      darkkhaki: 0xbdb76bff,\n      darkmagenta: 0x8b008bff,\n      darkolivegreen: 0x556b2fff,\n      darkorange: 0xff8c00ff,\n      darkorchid: 0x9932ccff,\n      darkred: 0x8b0000ff,\n      darksalmon: 0xe9967aff,\n      darkseagreen: 0x8fbc8fff,\n      darkslateblue: 0x483d8bff,\n      darkslategray: 0x2f4f4fff,\n      darkslategrey: 0x2f4f4fff,\n      darkturquoise: 0x00ced1ff,\n      darkviolet: 0x9400d3ff,\n      deeppink: 0xff1493ff,\n      deepskyblue: 0x00bfffff,\n      dimgray: 0x696969ff,\n      dimgrey: 0x696969ff,\n      dodgerblue: 0x1e90ffff,\n      firebrick: 0xb22222ff,\n      floralwhite: 0xfffaf0ff,\n      forestgreen: 0x228b22ff,\n      fuchsia: 0xff00ffff,\n      gainsboro: 0xdcdcdcff,\n      ghostwhite: 0xf8f8ffff,\n      gold: 0xffd700ff,\n      goldenrod: 0xdaa520ff,\n      gray: 0x808080ff,\n      green: 0x008000ff,\n      greenyellow: 0xadff2fff,\n      grey: 0x808080ff,\n      honeydew: 0xf0fff0ff,\n      hotpink: 0xff69b4ff,\n      indianred: 0xcd5c5cff,\n      indigo: 0x4b0082ff,\n      ivory: 0xfffff0ff,\n      khaki: 0xf0e68cff,\n      lavender: 0xe6e6faff,\n      lavenderblush: 0xfff0f5ff,\n      lawngreen: 0x7cfc00ff,\n      lemonchiffon: 0xfffacdff,\n      lightblue: 0xadd8e6ff,\n      lightcoral: 0xf08080ff,\n      lightcyan: 0xe0ffffff,\n      lightgoldenrodyellow: 0xfafad2ff,\n      lightgray: 0xd3d3d3ff,\n      lightgreen: 0x90ee90ff,\n      lightgrey: 0xd3d3d3ff,\n      lightpink: 0xffb6c1ff,\n      lightsalmon: 0xffa07aff,\n      lightseagreen: 0x20b2aaff,\n      lightskyblue: 0x87cefaff,\n      lightslategray: 0x778899ff,\n      lightslategrey: 0x778899ff,\n      lightsteelblue: 0xb0c4deff,\n      lightyellow: 0xffffe0ff,\n      lime: 0x00ff00ff,\n      limegreen: 0x32cd32ff,\n      linen: 0xfaf0e6ff,\n      magenta: 0xff00ffff,\n      maroon: 0x800000ff,\n      mediumaquamarine: 0x66cdaaff,\n      mediumblue: 0x0000cdff,\n      mediumorchid: 0xba55d3ff,\n      mediumpurple: 0x9370dbff,\n      mediumseagreen: 0x3cb371ff,\n      mediumslateblue: 0x7b68eeff,\n      mediumspringgreen: 0x00fa9aff,\n      mediumturquoise: 0x48d1ccff,\n      mediumvioletred: 0xc71585ff,\n      midnightblue: 0x191970ff,\n      mintcream: 0xf5fffaff,\n      mistyrose: 0xffe4e1ff,\n      moccasin: 0xffe4b5ff,\n      navajowhite: 0xffdeadff,\n      navy: 0x000080ff,\n      oldlace: 0xfdf5e6ff,\n      olive: 0x808000ff,\n      olivedrab: 0x6b8e23ff,\n      orange: 0xffa500ff,\n      orangered: 0xff4500ff,\n      orchid: 0xda70d6ff,\n      palegoldenrod: 0xeee8aaff,\n      palegreen: 0x98fb98ff,\n      paleturquoise: 0xafeeeeff,\n      palevioletred: 0xdb7093ff,\n      papayawhip: 0xffefd5ff,\n      peachpuff: 0xffdab9ff,\n      peru: 0xcd853fff,\n      pink: 0xffc0cbff,\n      plum: 0xdda0ddff,\n      powderblue: 0xb0e0e6ff,\n      purple: 0x800080ff,\n      rebeccapurple: 0x663399ff,\n      red: 0xff0000ff,\n      rosybrown: 0xbc8f8fff,\n      royalblue: 0x4169e1ff,\n      saddlebrown: 0x8b4513ff,\n      salmon: 0xfa8072ff,\n      sandybrown: 0xf4a460ff,\n      seagreen: 0x2e8b57ff,\n      seashell: 0xfff5eeff,\n      sienna: 0xa0522dff,\n      silver: 0xc0c0c0ff,\n      skyblue: 0x87ceebff,\n      slateblue: 0x6a5acdff,\n      slategray: 0x708090ff,\n      slategrey: 0x708090ff,\n      snow: 0xfffafaff,\n      springgreen: 0x00ff7fff,\n      steelblue: 0x4682b4ff,\n      tan: 0xd2b48cff,\n      teal: 0x008080ff,\n      thistle: 0xd8bfd8ff,\n      tomato: 0xff6347ff,\n      turquoise: 0x40e0d0ff,\n      violet: 0xee82eeff,\n      wheat: 0xf5deb3ff,\n      white: 0xffffffff,\n      whitesmoke: 0xf5f5f5ff,\n      yellow: 0xffff00ff,\n      yellowgreen: 0x9acd32ff,\n    });\n\nfunction normalizeColor(color: unknown): number | null {\n  'worklet';\n\n  if (typeof color === 'number') {\n    if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {\n      return color;\n    }\n    return null;\n  }\n\n  if (typeof color !== 'string') {\n    return null;\n  }\n\n  const matchers = getMatchers();\n\n  let match: RegExpExecArray | null;\n\n  // Ordered based on occurrences on Facebook codebase\n  if ((match = matchers.hex6.exec(color))) {\n    return Number.parseInt(match[1] + 'ff', 16) >>> 0;\n  }\n\n  if (names[color] !== undefined) {\n    return names[color];\n  }\n\n  if ((match = matchers.rgb.exec(color))) {\n    return (\n      // b\n      ((parse255(match[1]) << 24) | // r\n        (parse255(match[2]) << 16) | // g\n        (parse255(match[3]) << 8) |\n        0x000000ff) >>> // a\n      0\n    );\n  }\n\n  if ((match = matchers.rgba.exec(color))) {\n    return (\n      // b\n      ((parse255(match[1]) << 24) | // r\n        (parse255(match[2]) << 16) | // g\n        (parse255(match[3]) << 8) |\n        parse1(match[4])) >>> // a\n      0\n    );\n  }\n\n  if ((match = matchers.hex3.exec(color))) {\n    return (\n      Number.parseInt(\n        match[1] +\n          match[1] + // r\n          match[2] +\n          match[2] + // g\n          match[3] +\n          match[3] + // b\n          'ff', // a\n        16\n      ) >>> 0\n    );\n  }\n\n  // https://drafts.csswg.org/css-color-4/#hex-notation\n  if ((match = matchers.hex8.exec(color))) {\n    return Number.parseInt(match[1], 16) >>> 0;\n  }\n\n  if ((match = matchers.hex4.exec(color))) {\n    return (\n      Number.parseInt(\n        match[1] +\n          match[1] + // r\n          match[2] +\n          match[2] + // g\n          match[3] +\n          match[3] + // b\n          match[4] +\n          match[4], // a\n        16\n      ) >>> 0\n    );\n  }\n\n  if ((match = matchers.hsl.exec(color))) {\n    return (\n      (hslToRgb(\n        parse360(match[1]), // h\n        parsePercentage(match[2]), // s\n        parsePercentage(match[3]) // l\n      ) |\n        0x000000ff) >>> // a\n      0\n    );\n  }\n\n  if ((match = matchers.hsla.exec(color))) {\n    return (\n      (hslToRgb(\n        parse360(match[1]), // h\n        parsePercentage(match[2]), // s\n        parsePercentage(match[3]) // l\n      ) |\n        parse1(match[4])) >>> // a\n      0\n    );\n  }\n\n  return null;\n}\n\nexport const opacity = (c: number): number => {\n  'worklet';\n  return ((c >> 24) & 255) / 255;\n};\n\nexport const red = (c: number): number => {\n  'worklet';\n  return (c >> 16) & 255;\n};\n\nexport const green = (c: number): number => {\n  'worklet';\n  return (c >> 8) & 255;\n};\n\nexport const blue = (c: number): number => {\n  'worklet';\n  return c & 255;\n};\n\nexport const rgbaColor = (\n  r: number,\n  g: number,\n  b: number,\n  alpha = 1\n): number | string => {\n  'worklet';\n  if (Platform.OS === 'web' || !_WORKLET) {\n    return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n  }\n  const a = Math.round(alpha * 255);\n  const c =\n    a * (1 << 24) +\n    Math.round(r) * (1 << 16) +\n    Math.round(g) * (1 << 8) +\n    Math.round(b);\n  if (Platform.OS === 'android') {\n    // on Android color is represented as signed 32 bit int\n    return c < (1 << 31) >>> 0 ? c : c - Math.pow(2, 32);\n  }\n  return c;\n};\n\n/* accepts parameters\n * r  Object = {r:x, g:y, b:z}\n * OR\n * r, g, b\n * 0 <= r, g, b <= 255\n * returns 0 <= h, s, v <= 1\n */\nfunction RGBtoHSV(rgb: RBG): HSV;\nfunction RGBtoHSV(r: number, g: number, b: number): HSV;\nfunction RGBtoHSV(r: any, g?: any, b?: any): HSV {\n  'worklet';\n  /* eslint-disable */\n  if (arguments.length === 1) {\n    g = r.g;\n    b = r.b;\n    r = r.r;\n  }\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const d = max - min;\n  const s = max === 0 ? 0 : d / max;\n  const v = max / 255;\n\n  let h;\n\n  switch (max) {\n    default:\n    /* fallthrough */\n    case min:\n      h = 0;\n      break;\n    case r:\n      h = g - b + d * (g < b ? 6 : 0);\n      h /= 6 * d;\n      break;\n    case g:\n      h = b - r + d * 2;\n      h /= 6 * d;\n      break;\n    case b:\n      h = r - g + d * 4;\n      h /= 6 * d;\n      break;\n  }\n\n  return {\n    h: h,\n    s: s,\n    v: v,\n  };\n  /* eslint-enable */\n}\n\n/* accepts parameters\n * h  Object = {h:x, s:y, v:z}\n * OR\n * h, s, v\n * 0 <= h, s, v <= 1\n * returns 0 <= r, g, b <= 255\n */\nfunction HSVtoRGB(hsv: HSV): RBG;\nfunction HSVtoRGB(h: number, s: number, v: number): RBG;\nfunction HSVtoRGB(h: any, s?: any, v?: any) {\n  'worklet';\n  /* eslint-disable */\n  var r, g, b, i, f, p, q, t;\n  if (arguments.length === 1) {\n    s = h.s;\n    v = h.v;\n    h = h.h;\n  }\n  i = Math.floor(h * 6);\n  f = h * 6 - i;\n  p = v * (1 - s);\n  q = v * (1 - f * s);\n  t = v * (1 - (1 - f) * s);\n  switch (i % 6) {\n    case 0:\n      (r = v), (g = t), (b = p);\n      break;\n    case 1:\n      (r = q), (g = v), (b = p);\n      break;\n    case 2:\n      (r = p), (g = v), (b = t);\n      break;\n    case 3:\n      (r = p), (g = q), (b = v);\n      break;\n    case 4:\n      (r = t), (g = p), (b = v);\n      break;\n    case 5:\n      (r = v), (g = p), (b = q);\n      break;\n  }\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255),\n  };\n  /* eslint-enable */\n}\n\nexport const hsvToColor = (\n  h: number,\n  s: number,\n  v: number\n): number | string => {\n  'worklet';\n  const { r, g, b } = HSVtoRGB(h, s, v);\n  return rgbaColor(r, g, b);\n};\n\nexport function processColorInitially(\n  color: unknown\n): number | null | undefined {\n  'worklet';\n  if (color === null || color === undefined || typeof color === 'number') {\n    return color;\n  }\n\n  let normalizedColor = normalizeColor(color);\n\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  normalizedColor = ((normalizedColor << 24) | (normalizedColor >>> 8)) >>> 0; // argb\n  return normalizedColor;\n}\n\nexport function isColor(value: unknown): boolean {\n  'worklet';\n  if (typeof value !== 'string') {\n    return false;\n  }\n  return processColorInitially(value) != null;\n}\n\nexport function processColor(color: unknown): number | null | undefined {\n  'worklet';\n  let normalizedColor = processColorInitially(color);\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  if (Platform.OS === 'android') {\n    // Android use 32 bit *signed* integer to represent the color\n    // We utilize the fact that bitwise operations in JS also operates on\n    // signed 32 bit integers, so that we can use those to convert from\n    // *unsigned* to *signed* 32bit int that way.\n    normalizedColor = normalizedColor | 0x0;\n  }\n\n  return normalizedColor;\n}\n\nexport function convertToHSVA(\n  color: unknown\n): [number, number, number, number] {\n  'worklet';\n  const processedColor = processColorInitially(color)!; // argb;\n  const a = (processedColor >>> 24) / 255;\n  const r = (processedColor << 8) >>> 24;\n  const g = (processedColor << 16) >>> 24;\n  const b = (processedColor << 24) >>> 24;\n  const { h, s, v } = RGBtoHSV(r, g, b);\n  return [h, s, v, a];\n}\n\nexport function toRGBA(HSVA: [number, number, number, number]): string {\n  'worklet';\n  const { r, g, b } = HSVtoRGB(HSVA[0], HSVA[1], HSVA[2]);\n  return `rgba(${r}, ${g}, ${b}, ${HSVA[3]})`;\n}\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: readonly number[],\n  colors: readonly number[]\n) => {\n  'worklet';\n  const colorsAsHSV = colors.map((c) => RGBtoHSV(c as any));\n  const h = interpolate(\n    value,\n    inputRange,\n    colorsAsHSV.map((c) => c.h),\n    Extrapolate.CLAMP\n  );\n  const s = interpolate(\n    value,\n    inputRange,\n    colorsAsHSV.map((c) => c.s),\n    Extrapolate.CLAMP\n  );\n  const v = interpolate(\n    value,\n    inputRange,\n    colorsAsHSV.map((c) => c.v),\n    Extrapolate.CLAMP\n  );\n  return hsvToColor(h, s, v);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: readonly number[],\n  colors: readonly number[]\n) => {\n  'worklet';\n  const r = Math.round(\n    interpolate(\n      value,\n      inputRange,\n      colors.map((c) => red(c)),\n      Extrapolate.CLAMP\n    )\n  );\n  const g = Math.round(\n    interpolate(\n      value,\n      inputRange,\n      colors.map((c) => green(c)),\n      Extrapolate.CLAMP\n    )\n  );\n  const b = Math.round(\n    interpolate(\n      value,\n      inputRange,\n      colors.map((c) => blue(c)),\n      Extrapolate.CLAMP\n    )\n  );\n  const a = interpolate(\n    value,\n    inputRange,\n    colors.map((c) => opacity(c)),\n    Extrapolate.CLAMP\n  );\n  return rgbaColor(r, g, b, a);\n};\n\nexport const interpolateColor = (\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace: 'RGB' | 'HSV' = 'RGB'\n): string | number => {\n  'worklet';\n  const processedOutputRange = outputRange.map((c) => processColor(c)!);\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(value, inputRange, processedOutputRange);\n  }\n  if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(value, inputRange, processedOutputRange);\n  }\n  throw new Error(\n    `invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n"]},"metadata":{},"sourceType":"module"}